///
/// HybridExchangerModuleSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridExchangerModuleSpec.hpp"

// Forward declaration of `HybridExchangerModuleSpec_cxx` to properly resolve imports.
namespace NitroTokenExchanger { class HybridExchangerModuleSpec_cxx; }



#include <functional>
#include <NitroModules/Promise.hpp>
#include <string>

#include "NitroTokenExchanger-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::tokenexchanger {

  /**
   * The C++ part of HybridExchangerModuleSpec_cxx.swift.
   *
   * HybridExchangerModuleSpecSwift (C++) accesses HybridExchangerModuleSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridExchangerModuleSpec_cxx can directly inherit from the C++ class HybridExchangerModuleSpec
   * to simplify the whole structure and memory management.
   */
  class HybridExchangerModuleSpecSwift: public virtual HybridExchangerModuleSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridExchangerModuleSpecSwift(const NitroTokenExchanger::HybridExchangerModuleSpec_cxx& swiftPart):
      HybridObject(HybridExchangerModuleSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroTokenExchanger::HybridExchangerModuleSpec_cxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void registerTokenExchanger(const std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::string>>>>(const std::string& /* setupToken */)>& tokenExchanger) override {
      auto __result = _swiftPart.registerTokenExchanger(tokenExchanger);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::shared_ptr<Promise<std::string>> testTokenExchanger() override {
      auto __result = _swiftPart.testTokenExchanger();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroTokenExchanger::HybridExchangerModuleSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::tokenexchanger
