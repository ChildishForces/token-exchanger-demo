///
/// HybridExchangerModuleSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridExchangerModuleSpec``
public protocol HybridExchangerModuleSpec_protocol: AnyObject {
  // Properties
  

  // Methods
  func registerTokenExchanger(tokenExchanger: @escaping ((_ setupToken: String) -> Promise<Promise<String>>)) throws -> Void
  func testTokenExchanger() throws -> Promise<String>
}

/// See ``HybridExchangerModuleSpec``
public class HybridExchangerModuleSpec_base: HybridObjectSpec {
  private weak var cxxWrapper: HybridExchangerModuleSpec_cxx? = nil
  public func getCxxWrapper() -> HybridExchangerModuleSpec_cxx {
  #if DEBUG
    guard self is HybridExchangerModuleSpec else {
      fatalError("`self` is not a `HybridExchangerModuleSpec`! Did you accidentally inherit from `HybridExchangerModuleSpec_base` instead of `HybridExchangerModuleSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridExchangerModuleSpec_cxx(self as! HybridExchangerModuleSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
  public var memorySize: Int { return 0 }
}

/**
 * A Swift base-protocol representing the ExchangerModule HybridObject.
 * Implement this protocol to create Swift-based instances of ExchangerModule.
 * ```swift
 * class HybridExchangerModule : HybridExchangerModuleSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridExchangerModuleSpec = HybridExchangerModuleSpec_protocol & HybridExchangerModuleSpec_base
